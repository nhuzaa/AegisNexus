#!/bin/bash

# OpenTofu/Terraform Deployment Script for Azure Kubernetes Infrastructure
# This script deploys Azure VM with proper NSG rules for the complete stack

set -e

echo "=========================================="
echo "üöÄ Azure Infrastructure Deployment"
echo "=========================================="
echo

# Check if we're in the right directory
if [ ! -f "main.tf" ]; then
    echo "‚ùå Error: main.tf not found!"
    echo "Please run this script from the opentofu directory."
    exit 1
fi

# Check if OpenTofu is installed
TERRAFORM_CMD=""
if command -v tofu &> /dev/null; then
    TERRAFORM_CMD="tofu"
    echo "‚úÖ OpenTofu found"
elif command -v terraform &> /dev/null; then
    TERRAFORM_CMD="terraform"
    echo "‚úÖ Terraform found"
else
    echo "‚ùå Error: Neither OpenTofu nor Terraform is installed!"
    echo "Please install one of them:"
    echo "  - OpenTofu: https://opentofu.org/docs/intro/install/"
    echo "  - Terraform: https://learn.hashicorp.com/tutorials/terraform/install-cli"
    exit 1
fi

# Check if Azure CLI is installed and user is logged in
if ! command -v az &> /dev/null; then
    echo "‚ùå Error: Azure CLI is not installed!"
    echo "Please install Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi

# Check if logged into Azure
if ! az account show &> /dev/null; then
    echo "‚ùå Error: Not logged into Azure!"
    echo "Please login: az login"
    exit 1
fi

echo "‚úÖ Azure CLI authenticated"

# Check for SSH key
SSH_KEY_PATH="${HOME}/.ssh/id_rsa.pub"
if [ ! -f "$SSH_KEY_PATH" ]; then
    echo "‚ö†Ô∏è  SSH public key not found at $SSH_KEY_PATH"
    echo "Generating new SSH key pair..."
    ssh-keygen -t rsa -b 4096 -f "${HOME}/.ssh/id_rsa" -N ""
    echo "‚úÖ SSH key pair generated"
fi

# Create terraform.tfvars if it doesn't exist
if [ ! -f "terraform.tfvars" ]; then
    echo "üìù Creating terraform.tfvars from template..."
    cp terraform.tfvars.example terraform.tfvars
    echo "‚úÖ Created terraform.tfvars - please review and customize if needed"
fi

echo
echo "üîß Infrastructure Configuration:"
echo "  - VM Size: Standard_D4s_v3 (4 vCPU, 16GB RAM)"
echo "  - Disk: 128GB Premium SSD"
echo "  - OS: Ubuntu 20.04 LTS"
echo "  - NSG: All TCP ports allowed (development mode)"
echo "  - Location: East US 2"
echo

read -p "Continue with deployment? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled."
    exit 0
fi

echo
echo "‚è≥ Initializing $TERRAFORM_CMD..."
$TERRAFORM_CMD init

echo
echo "üìã Planning deployment..."
$TERRAFORM_CMD plan -out=tfplan

echo
echo "üöÄ Applying infrastructure..."
$TERRAFORM_CMD apply tfplan

echo
echo "üìä Deployment completed!"
echo

# Get outputs
VM_IP=$($TERRAFORM_CMD output -raw vm_public_ip)
VM_NAME=$($TERRAFORM_CMD output -raw vm_name)
RG_NAME=$($TERRAFORM_CMD output -raw resource_group_name)

echo "=========================================="
echo "üéâ INFRASTRUCTURE DEPLOYED SUCCESSFULLY!"
echo "=========================================="
echo
echo "VM Details:"
echo "  Name: $VM_NAME"
echo "  Public IP: $VM_IP"
echo "  Resource Group: $RG_NAME"
echo "  SSH Command: ssh -i ~/.ssh/id_rsa azureuser@$VM_IP"
echo

# Update the parent directory's inventory.ini
INVENTORY_PATH="../inventory.ini"
echo "üìù Updating Ansible inventory..."

cat > "$INVENTORY_PATH" << EOF
# Azure VM Inventory for Kubernetes Infrastructure Setup
# Generated by OpenTofu deployment on $(date)

[azure_vm]
$VM_IP ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa

[azure_vm:vars]
ansible_python_interpreter=/usr/bin/python3
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
# Increase timeout for long-running operations
ansible_ssh_connection_timeout=30
ansible_ssh_command_timeout=300
EOF

echo "‚úÖ Updated $INVENTORY_PATH"
echo

# Test SSH connectivity
echo "üîç Testing SSH connectivity..."
if timeout 10 ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 azureuser@$VM_IP "echo 'SSH connection successful'" 2>/dev/null; then
    echo "‚úÖ SSH connectivity confirmed!"
else
    echo "‚ö†Ô∏è  SSH test failed - VM might still be booting. Please wait a few minutes and try again."
fi

echo
echo "=========================================="
echo "üîß NEXT STEPS"
echo "=========================================="
echo
echo "1. Wait for VM to fully boot (1-2 minutes)"
echo
echo "2. Test SSH connection:"
echo "   ssh -i ~/.ssh/id_rsa azureuser@$VM_IP"
echo
echo "3. Deploy Kubernetes infrastructure:"
echo "   cd .. && ./deploy.sh"
echo
echo "4. Access services after deployment:"
echo "   - Grafana: http://$VM_IP:3000 (admin/admin)"
echo "   - Prometheus: http://$VM_IP:9090"
echo "   - Litmus Portal: http://$VM_IP:8080"
echo "   - Nginx App: http://$VM_IP:8081"
echo
echo "5. To destroy infrastructure:"
echo "   cd opentofu && $TERRAFORM_CMD destroy"
echo
echo "üéä Infrastructure deployment completed!"

# Clean up plan file
rm -f tfplan
